/* ─── Helper functions ─────────────────────────────────────────── */
def get_group_arn(String name, String region) {
    sh(
        script: """
          aws elbv2 describe-target-groups --names '${name}' \
            --region ${region} \
            --query 'TargetGroups[0].TargetGroupArn' --output text
        """,
        returnStdout: true
    ).trim()
}
def ip_to_instance(String ip, String region) {
    sh(
        script: """
          aws ec2 describe-instances \
            --filters "Name=ip-address,Values=${ip}" \
            --region ${region} \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text
        """,
        returnStdout: true
    ).trim()
}


pipeline {
    agent any

    parameters {
        string(name: 'IP',           defaultValue: '',      description: 'Public IP sent by cloud-init')
        string(name: 'headers_name', defaultValue: 'Guest', description: 'Header value Nginx will echo')
    }

    environment {
        REGION            = 'il-central-1'
        TARGET_GROUP_NAME = 'tg-lior'
        SSH_KEY_PATH      = '~/.ssh/id_rsa'     // המפתח שיועתק
        ANSIBLE_USER      = 'ubuntu'
        PLAYBOOK          = 'playbook.yml'
        NGINX_PORT        = '6789'
        BUILD_NUM         = "${env.BUILD_NUMBER}"
    }

    stages {

        stage('Sanity') {
            steps {
                script {
                    if (!params.IP) {
                        error "IP parameter missing – cloud-init must supply it"
                    }
                    echo "Caller IP: ${params.IP}"
                }
            }
        }

        stage('Prepare SSH') {
            steps {
                sh """
                  mkdir -p ~/.ssh && chmod 700 ~/.ssh
                  cp /var/jenkins_home/.ssh/imtec.pem ${env.SSH_KEY_PATH}
                  chmod 600 ${env.SSH_KEY_PATH}
                  ssh-keyscan -H ${params.IP} >> ~/.ssh/known_hosts
                """
            }
        }

        stage('Generate Ansible vars file') {
            steps {
                sh """
                  mkdir -p roles/nginx/vars
                  cat > roles/nginx/vars/main.yml <<'EOF'
---
nginx_port: ${env.NGINX_PORT}
headers_name: ${params.headers_name}
jenkins_build_number: ${env.BUILD_NUM}
EOF
                  echo '[INFO] Created roles/nginx/vars/main.yml'
                """
            }
        }

        stage('Deploy Nginx') {
            steps {
                script {
                    /* 1. build inventory */
                    sh """
                      cat > inventory_dynamic.ini <<'EOF'
[servers]
${params.IP} ansible_user=${env.ANSIBLE_USER} ansible_ssh_private_key_file=${env.SSH_KEY_PATH}
EOF
                      echo '[INFO] Created inventory_dynamic.ini'
                    """

                    /* 2. run playbook */
                    sh """
                      ansible-playbook -i inventory_dynamic.ini \
                        --private-key=${env.SSH_KEY_PATH} \
                        --extra-vars @roles/nginx/vars/main.yml \
                        ${env.PLAYBOOK}
                    """
                }
            }
        }

        stage('Register in Target-Group') {
            steps {
                script {
                    def tgArn      = get_group_arn(env.TARGET_GROUP_NAME, env.REGION)
                    def instanceId = ip_to_instance(params.IP, env.REGION)

                    echo "Target-Group ARN : ${tgArn}"
                    echo "Instance ID      : ${instanceId}"

                    sh """
                      aws elbv2 register-targets \
                        --target-group-arn ${tgArn} \
                        --region ${env.REGION} \
                        --targets Id=${instanceId},Port=${env.NGINX_PORT}

                      aws elbv2 wait target-in-service \
                        --target-group-arn ${tgArn} \
                        --region ${env.REGION} \
                        --targets Id=${instanceId},Port=${env.NGINX_PORT}
                    """
                }
            }
        }
    }
}
